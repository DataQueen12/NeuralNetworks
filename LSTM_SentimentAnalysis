import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Example text data
texts = ["I love this movie!", "This is a bad movie.", "The movie was okay."]
labels = np.array([1, 0, 1])  # 1 = positive, 0 = negative

# Text Preprocessing
tokenizer = Tokenizer(num_words=5000)
tokenizer.fit_on_texts(texts)
sequences = tokenizer.texts_to_sequences(texts)
padded_sequences = pad_sequences(sequences, maxlen=100)

# Building the LSTM Model
model = Sequential()
model.add(Embedding(input_dim=5000, output_dim=128, input_length=100))
model.add(LSTM(units=128))  # LSTM now receives the correct 3D input
model.add(Dense(units=1, activation='sigmoid'))

# Compiling the Model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Training the LSTM Model
model.fit(padded_sequences, labels, epochs=10, batch_size=64)

# Function to Predict Sentiments of New Texts
def predict_sentiments(texts, tokenizer, model, maxlen=100):
    # Convert texts to sequences
    sequences = tokenizer.texts_to_sequences(texts)
    # Pad sequences to ensure uniform input length
    padded_sequences = pad_sequences(sequences, maxlen=maxlen)
    # Predict sentiments
    predictions = model.predict(padded_sequences)
    # Interpret results
    for i, text in enumerate(texts):
        sentiment = "Positive" if predictions[i] >= 0.5 else "Negative"
        print(f"Text: {text}\nSentiment: {sentiment} (Probability: {predictions[i][0]:.4f})\n")

# Example usage with new texts
new_texts = [
    "This is the best product I have ever used!",
    "The service was terrible and I won't come back.",
    "It was okay, nothing special.",
    "Absolutely loved the experience!",
    "I hated the movie, it was so boring."
]

predict_sentiments(new_texts, tokenizer, model)
